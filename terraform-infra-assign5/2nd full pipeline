pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1'  // update if needed
    }

    options {
        // Optional: Keep only last 10 builds to save disk space
        buildDiscarder(logRotator(numToKeepStr: '10'))
        // Optional: Timeout build after 30 minutes
        timeout(time: 30, unit: 'MINUTES')
    }

    stages {
        stage('Checkout Code') {
            steps {
                // Checkout your repo using GitHub token securely
                withCredentials([usernamePassword(credentialsId: 'github-token', usernameVariable: 'GITHUB_USER', passwordVariable: 'GITHUB_TOKEN')]) {
                    sh 'rm -rf one-click-infra || true' // clean old clone
                    sh "git clone https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/ThakurDhani/one-click-infra.git"
                }
            }
        }

        stage('Terraform Init & Apply') {
            steps {
                dir('one-click-infra/One-click-infra-ES/terraform') {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-creds']]) {
                        sh '''
                            terraform init
                            terraform apply -auto-approve
                        '''
                    }
                }
            }
        }

        stage('Wait for Bastion & Resources') {
            steps {
                echo "Waiting 120 seconds for Bastion and other resources to be ready..."
                sleep 120
            }
        }

        stage('Configure SSH') {
            steps {
                dir('one-click-infra/One-click-infra-ES') {
                    withCredentials([sshUserPrivateKey(credentialsId: 'oneclick-key', keyFileVariable: 'SSH_KEY')]) {
                        script {
                            // Fetch Bastion Public IP from terraform output
                            def bastionIP = sh(
                                script: "terraform output -raw bastion_public_ip",
                                returnStdout: true
                            ).trim()

                            // Write SSH config file
                            writeFile file: "${env.WORKSPACE}/.ssh_config", text: """
                            Host bastion
                              HostName ${bastionIP}
                              User ubuntu
                              IdentityFile ${SSH_KEY}
                              StrictHostKeyChecking no

                            Host private-ec2-*
                              User ubuntu
                              IdentityFile ${SSH_KEY}
                              ProxyJump bastion
                              StrictHostKeyChecking no
                            """

                            sh "chmod 600 ${env.WORKSPACE}/.ssh_config"
                        }
                    }
                }
            }
        }

        stage('Run Ansible Playbook') {
            steps {
                dir('one-click-infra/One-click-infra-ES/ansible') {
                    withCredentials([sshUserPrivateKey(credentialsId: 'oneclick-key', keyFileVariable: 'SSH_KEY')]) {
                        sh '''
                            export ANSIBLE_HOST_KEY_CHECKING=False
                            ansible-playbook -i inventory/aws_ec2.yml playbook.yml --private-key $SSH_KEY --ssh-extra-args "-F ${WORKSPACE}/.ssh_config"
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning workspace...'
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed. Please check logs!'
        }
    }
}
